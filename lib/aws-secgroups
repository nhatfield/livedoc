create_ec2secgroups_attributes() {
  echo "**${provider} ${dirAlias} Attributes**

* **Environment:** \`${env}\`
* **VPC:** [${vpc}](https://${acc_region}.console.aws.amazon.com/vpc/home?region=${acc_region}#VpcDetails:VpcId=${vpc})
* **Description:** \`${description}\`
* **Group ID:** \`${id}\`
${extraAttributes}"
}

get_ec2secgroups() {
  dirAlias="SecurityGroups"
  set_docDir
  docFile="${docDir}/all.md"

  logInfo "running scan on ${acc_alias} ${acc_region}"
  resource=$(aws ec2 describe-security-groups 2>/dev/null | jq '.SecurityGroups[] | select(.GroupName != "default")') || logWarn "could not describe any security groups"

  resource_ids=$(jq -r '.GroupId' <<< "${resource}") || logWarn "no security groups discovered"

  if [ "${resource}" ]; then
    echo "**${acc_alias} (${account})**" > "${docFile}"
    echo >> "${docFile}"
    echo "**count:** $(wc -l <<< "${resource_ids}")" >> "${docFile}"
    echo >> "${docFile}"
    echo "| Name | Environment | Group ID | VPC | Account ID |" >> "${docFile}"
    echo "|:-----|-------------|:---------|:----|------------|" >> "${docFile}"
    jq -r --arg reg "${acc_region}" --arg acc "${account}" --arg env "${aws_environment_tag_name}" '"| [" +
           (select(.Tags != null) | .Tags[] | select(.Key != null) | select(.Key == "Name").Value) +
             "](" + (select(.Tags != null) | .Tags[] | select(.Key != null) | select(.Key == "Name").Value) +
           ".md) | " +
           (select(.Tags != null) | .Tags[] | select(.Key != null) | select(.Key == $env).Value) +
           " | [" +
             (.GroupId) +
               "](https://" + $reg + ".console.aws.amazon.com/ec2/home?region=" + $reg + "#SecurityGroup:groupId=" + (.GroupId) +
           ")" +
           " | [" +
           (.VpcId) +
             "](https://" + $reg + ".console.aws.amazon.com/vpc/home?region=" + $reg + "#VpcDetails:VpcId=" + (.VpcId) +
           ") | " +
           $acc +
           " |"' <<< "${resource}" 2>/dev/null >> "${docFile}" || logWarn "all instances are missing one or more required tags [${aws_environment_tag_name}|Name]."
  fi
  
  validate_ec2secgroups

  if [ "${resource_ids}" ]; then  
    for i in ${resource_ids}; do
      logInfo "creating document for ${i}"
      me=($(jq -r --arg i "${i}" 'select(.GroupId == $i) | .GroupName, .VpcId' <<< "${resource}"))
  
      name=$(jq -r --arg i "${i}" 'select(.GroupId == $i) | .Tags[] | select(.Key == "Name").Value' <<< "${resource}" 2>/dev/null) || true
      env=$(jq -r --arg i "${i}" --arg env "${aws_environment_tag_name}" 'select(.GroupId == $i) | .Tags[] | select(.Key == $env).Value' <<< "${resource}" 2>/dev/null) || true
      infra_timestamp=$(jq -r --arg i "${i}" --arg tagname "${change_control_timestamp_infra_tag_name}" 'select(.GroupId == $i) | .Tags[] | select(.Key == $tagname).Value' <<< "${resource}" 2>/dev/null) || true
      os_timestamp=$(jq -r --arg i "${i}" --arg tagname "${change_control_timestamp_os_tag_name}" 'select(.GroupId == $i) | .Tags[] | select(.Key == $tagname).Value' <<< "${resource}" 2>/dev/null) || true
      sourceOsPath=$(jq -r --arg i "${i}" --arg tagname "${source_control_os_tag_name}" 'select(.GroupId == $i) | .Tags[] | select(.Key == $tagname).Value' <<< "${resource}" 2>/dev/null) || true
      sourceInfraPath=$(jq -r --arg i "${i}" --arg tagname "${source_control_infra_tag_name}" 'select(.GroupId == $i) | .Tags[] | select(.Key == $tagname).Value' <<< "${resource}" 2>/dev/null) || true
      description=$(jq -r --arg i "${i}" 'select(.GroupId == $i) | .Description' <<< "${resource}")
      ingress=$(jq -r --arg i "${i}" 'select(.GroupId == $i) | .IpPermissions[]' <<< "${resource}")
      egress=$(jq -r --arg i "${i}" 'select(.GroupId == $i) | .IpPermissionsEgress[]' <<< "${resource}")  

      groupName=${me[0]:-""}
      vpc=${me[1]:-""}
  
      id=${i}
  
      if [ "${name}" ] && [ "${env}" ]; then
        filename=${name}
      else
        [ "${name}" ] || name=NULL
        [ "${env}" ] || env=NULL
        filename=${i}
      fi

      extraAttributes=
      if [ "${ingress}" ]; then
        ingressProto=$(jq -r 'select(.IpProtocol != "4") | .IpProtocol' <<< "${ingress}" | sort -u)

        [ "${extraAttributes}" ] && extraAttributes="${extraAttributes}

* **Ingress Rules:**" || extraAttributes="* **Ingress Rules:**"

        for i in ${ingressProto}; do
          if [ "${i}" = "-1" ]; then
            extraAttributes="${extraAttributes}
  * **All Traffic: (tcp,udp,icmp)**
$(jq -r --arg p "${i}" 'select(.IpProtocol == $p) | "    * \(.IpRanges[].CidrIp) - \(.IpRanges[].Description // "No description provided")","    * \(.Ipv6Ranges[].CidrIpv6) - \(.Ipv6Ranges[].Description // "No description provided")","    * \(.UserIdGroupPairs[].GroupId) - \(.UserIdGroupPairs[].Description // "No description provided")"' <<<  "${ingress}")"

          elif [ "${i}" = "tcp" ] || [ "${i}" = "udp" ]; then
            extraAttributes="${extraAttributes}
$(jq -r --arg p "${i}" 'select(.IpProtocol == $p) | "  * **\(.FromPort) - \(.ToPort): (\($p))**","    * \(.IpRanges[].CidrIp) - \(.IpRanges[].Description // "No description provided")","    * \(.Ipv6Ranges[].CidrIpv6) - \(.Ipv6Ranges[].Description // "No description provided")","    * \(.UserIdGroupPairs[].GroupId) - \(.UserIdGroupPairs[].Description // "No description provided")"' <<<  "${ingress}")"

          elif [ "${i}" = "icmp" ]; then
            extraAttributes="${extraAttributes}
  * **All ICMP:**
$(jq -r --arg p "${i}" 'select(.IpProtocol == $p) | "    * \(.IpRanges[].CidrIp) - \(.IpRanges[].Description // "No description provided")","    * \(.Ipv6Ranges[].CidrIpv6) - \(.Ipv6Ranges[].Description // "No description provided")","    * \(.UserIdGroupPairs[].GroupId) - \(.UserIdGroupPairs[].Description // "No description provided")"' <<<  "${ingress}")"
          fi
        done
      fi

      if [ "${egress}" ]; then
        egressProto=$(jq -r 'select(.IpProtocol != "4") | .IpProtocol' <<< "${egress}" | sort -u)

        [ "${extraAttributes}" ] && extraAttributes="${extraAttributes}

* **Egress Rules:**" || extraAttributes="* **Egress Rules:**"

        for i in ${egressProto}; do
          if [ "${i}" = "-1" ]; then
            extraAttributes="${extraAttributes}
  * **All Traffic: (tcp,udp,icmp)**
$(jq -r --arg p "${i}" 'select(.IpProtocol == $p) | "    * \(.IpRanges[].CidrIp) - \(.IpRanges[].Description // "No description provided")","    * \(.Ipv6Ranges[].CidrIpv6) - \(.Ipv6Ranges[].Description // "No description provided")","    * \(.UserIdGroupPairs[].GroupId) - \(.UserIdGroupPairs[].Description // "No description provided")"' <<<  "${egress}")"

          elif [ "${i}" = "tcp" ] || [ "${i}" = "udp" ]; then
            extraAttributes="${extraAttributes}
$(jq -r --arg p "${i}" 'select(.IpProtocol == $p) | "  * **\(.FromPort) - \(.ToPort): (\($p))**","    * \(.IpRanges[].CidrIp) - \(.IpRanges[].Description // "No description provided")","    * \(.Ipv6Ranges[].CidrIpv6) - \(.Ipv6Ranges[].Description // "No description provided")","    * \(.UserIdGroupPairs[].GroupId) - \(.UserIdGroupPairs[].Description // "No description provided")"' <<<  "${egress}")"

          elif [ "${i}" = "icmp" ]; then
            extraAttributes="${extraAttributes}
  * **All ICMP:**
$(jq -r --arg p "${i}" 'select(.IpProtocol == $p) | "    * \(.IpRanges[].CidrIp) - \(.IpRanges[].Description // "No description provided")","    * \(.Ipv6Ranges[].CidrIpv6) - \(.Ipv6Ranges[].Description // "No description provided")","    * \(.UserIdGroupPairs[].GroupId) - \(.UserIdGroupPairs[].Description // "No description provided")"' <<<  "${ingress}")"
          fi
        done
      fi

      docFile=${docDir}/${filename}.md
      attributes=$(create_ec2secgroups_attributes)
      create_monitor_attributes false
      docit
    done
  fi
}

validate_ec2secgroups() {
  if [ "${resource_ids}" ]; then
    for i in ${resource_ids}; do
      grep -q "${i}" "${docFile}" || echo "| [unknown](${i}.md) | \`NULL\` | [${i}](https://${acc_region}.console.aws.amazon.com/ec2/home?region=${acc_region}#SecurityGroup:groupId=${i}) | unknown | ${account} |" >> "${docFile}"
    done
    echo "${resource}" > "${docDir}"/resource.json
  else
    rm -rf "${docFile}"
  fi

  cleanup
}
